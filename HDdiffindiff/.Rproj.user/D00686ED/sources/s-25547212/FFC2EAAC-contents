library(foreach)
library(doParallel)
library(glmnet)
library(MASS)
library(flare)
library(doSNOW)
#library(spline2)
rm(list = ls())
setwd("D:\\Dropbox\\diffindiff\\Simulation\\result\\")
source("Sieve_Functional_Space_Basis.r")
#setwd("C:\\Users\\sidpeng\\Dropbox\\diffindiff\\Simulation\\result\\")
seed(3)
p = 200
q = 8
n0 = 500
rho.X = 0.5


omega0 = rep(0,p)
for (i in 1:10){
  omega0[i] = 1/i
}
omega0 = matrix(omega0, p, 1)
omega1 = rep(0,p)
for (i in 1:15){
  omega1[i] = 2/i
}
omega1 = matrix(omega1, p, 1)
theta0 = rep(0,p)
for (i in 1:10){
  theta0[i] = 1/i
}

beta0=omega1-omega0

z = rnorm(1000000,0, 1)
zbasis = sieve.TriPol(z, q/2)
yy = exp(z)
bb = solve(t(zbasis)%*%zbasis)%*%t(zbasis)%*%yy


beta0 = c(beta0, (bb[2:(q+1)])) #  
#1, 1/2, 1/factorial(3), 1/factorial(4), 1/factorial(5), 1/factorial(6), 1/factorial(7), 1/factorial(8)
#beta0 = rbind(beta0, 1, 0.5, -0.3,0,0,0)
source("highdimdiffindiff_crossfit.r")
#zbasis = sieve.Pol(z, q)
pf = c(rep(1, 1,p), rep(0, 1, q))
  
betalst <- rep(0, p+q)
covergeCI <- rep(0, p+q)
lengthCI <- rep(0, p+q)

cores=detectCores()
cl <- makeCluster(cores[1]-1) #not to overload your computer
#registerDoParallel(cl)
registerDoSNOW(cl)

nsim = 100

pb<-txtProgressBar(0,nsim,style=3)
progress<-function(n){
  setTxtProgressBar(pb,n)
}
opts<-list(progress=progress)

combine <-function(x, ...){
  mapply(rbind, x, ..., SIMPLIFY = FALSE)
}

#for (iteration in 1 : 10){
output <-foreach(iteration = 1:nsim, .combine = combine, .multicombine = TRUE,.options.snow=opts)%dopar%{
  library(MASS)
  ff = NULL
  #browser()
  while(is.null(ff)){
   try({
      
  alpha = 0
  sig   <-  0.5^(p-toeplitz(p:1))
  x = mvrnorm(n0, mu = rep(0, p), Sigma = sig)
  y0 = rnorm(n0,0,1)*(1/sqrt(2)*z +1/sqrt(2)*x[,1])
  prop = 1-1/(1+exp( x %*% theta0))
  treat = rbinom(n0,1,prop)
  
  z = rnorm(n0,0, 1)
  epsilon0 = rnorm(n0,0,1)
  epsilon1 = rnorm(n0,0,2)
  
  #Phi0 = (x %*% omega0) + exp(z)
  #Phi1 = (x %*% omega1) + exp(z)
  
  Phi0 = (x %*% omega0)
  Phi1 = (x %*% omega1) +  exp(z)-bb[1] #0.5*z^2 - 0.3*z^3
  
  y1 = y0 + alpha + (Phi1 + epsilon1)*treat + (Phi0 + epsilon0)*(1-treat)
  

  ff = highdimdiffindiff_crossfit(y0, y1, treat, x, z, q=q, 3)
    })
  }
  
   CI = rbind(c(ff$xdebias, ff$gdebias)-1.64*c(ff$stdx, ff$stdg), c(ff$xdebias, ff$gdebias)+1.64*c(ff$stdx, ff$stdg))
   covergeCI = t(CI[1,]<beta0 & CI[2,]>beta0)
   lengthCI <-(CI[2,]- CI[1,])
   betalst <- c(ff$xdebias,ff$gdebias)
   list(covergeCI,  lengthCI, betalst)
   #print(iteration)
}

stopCluster(cl)
mse1 <- rowMeans(apply(output[[3]],1, function(x){(x- beta0)^2}))
bias <- rowMeans(apply(output[[3]],1, function(x){(x- beta0)}))
variance <- diag(var(output[[3]]))
cov <- colMeans(output[[1]], na.rm=TRUE)
len <- colMeans(output[[2]])


out <- cbind(mse1,bias, variance, cov, len, beta0)
colnames(out) <- c('mse','bias','var','cov','CIlength', 'beta0')
write.csv(out,"crossfit exp new basis hetero p=200,q=8, n=500.csv", row.names=F)
