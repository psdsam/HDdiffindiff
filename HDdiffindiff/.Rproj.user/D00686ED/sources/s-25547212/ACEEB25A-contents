#' SIRbound estimates the standard SIR model when the observation is incomplete.
#' @import nleqslv GillespieSSA graphics stats
#' @importFrom graphics legend lines par plot points
#' @importFrom stats ksmooth pnorm qnorm quantile runif ts var
#' @param ts Event time
#' @param S Number of susceptive individuals
#' @param I Number of infected individuals
#' @param R Number of recovered individuals
#' @param n Total number of individuals
#' @param I0 Number of infected individual at time 0
#' @param It Number of infected indiviudal at time Tmax
#' @param ci.alpha Level for confidence intervals
#' @param flag Regimes: 1) Continuous observation of S,I,R; 2) Continuous observation of I; 3) Continuous observation of R; 4) Continuous observation of R + some arrival time S->I; 5) Discrete observation of S,I,R; 6) Discrete observation of R and gu: length of infectious period
#' @param gu Only used under flag (6). length of infectious period
#' @param subregime Only used under flag (6). Choose the definition for gu: 1 if gu is the fixed length of infectious period. 0 if gu is the upper bound for the length of infectious period: warning for subregime 0: only apply when N>>I
#' @param birth Only used under flag (6). Exogenous process for population change. Used under subregime 1. If not specifed, population is assumed constant during the infectious period.
#' @param S0 Only used under flag (6). Number of susceptible individuals at time 0.
#' @param band Only used under flag (6). Choice of smoothing bandwidth.
#' @return
#' \item{betahat}{Point estimator of \eqn{\beta}}
#' \item{betahat_L}{Lower bound for the estimator of \eqn{\beta}}
#' \item{betahat_U}{Upper bound for the estimator of \eqn{\beta}}
#' \item{gammahat}{Point estimator of \eqn{\gamma}}
#' \item{gammahat_L}{Lower bound for the estimator of \eqn{\gamma}}
#' \item{gammahat_U}{Upper bound for the estimator of \eqn{\gamma}}
#' \item{betahat_CI}{Confidence interval for \eqn{\beta}}
#' \item{gammahat_CI}{Confidence interval for \eqn{\gamma}}
#' @author Forrest Crawford and Sida Peng
#' @export
#'

SIRbound <- function(ts, S, I, R, n, It, I0, gu, subregime, birth, S0, band, ci.alpha = 0.05, flag){

  env <- environment()
  check_entries(as.list.environment(env))

  TT = length(ts)
  #regmie 3.1.1
  if (flag==1 | flag=="ContSIR"){
    if (missing(I)){I = rep(n, length(S))-S-R}
    if (missing(R)){R = rep(n, length(S))-I-S}
    if (missing(S)){S = rep(n, length(I))-I-R}
    est<-SIRbound_st(ts,I,R,n,ci.alpha)
    est$S = S; est$I = I; est$R = R
  #regmie 3.1.2
  }else if(flag ==2 | flag=="ContI"){
      est<-SIRbound_I(ts,I,n,ci.alpha)
      est$I = I
  #regmie 3.1.3
  }else if(flag ==3 | flag=="ContR"){
    est<-SIRbound_R(ts,R,n,I0,It,ci.alpha)
    est$R = R
  #regmie 3.1.4
  }else if(flag ==4 | flag=="ContR2"){
    est<-SIRbound_R_time(ts,R,n,I0,It,ci.alpha)
    est$R = R
  #regmie 3.1.5
  }else if(flag ==5 | flag=="DiscSIR"){
      if (missing(I)){I = rep(n, length(S))-S-R}
      if (missing(R)){R = rep(n, length(S))-I-S}
      if (missing(S)){S = rep(n, length(I))-I-R}
      est<-SIRbound_discr(ts,I,R,n,ci.alpha)
      est$S = S; est$I = I; est$R = R

  }else if (flag == 6 | flag=="DiscR"){
    est<-SIRbound_I_discr(ts,R,gu,ci.alpha, subregime=1, n, birth, S0, band)
  }
  est$ts = ts;est$flag = flag;est$N = n
  class(est) = "SIRbound"
  est
}



