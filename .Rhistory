install.packages('roxygen2 ')
library(roxygen2)
install.packages('roxygen2')
library(roxygen2)
install.packages("glmnet")
install.packages("devtools")
install.packages("devtools")
library(devtools)
library(HDdiffindiff)
install.packages("Rtools")
library(Rtools'')
library(Rtools)
library('Rtools')
library(HDdiffindiff)
library('Rtools')
library(HDdiffindiff)
Sys.which("make")
writeLines('PATH="${RTOOLS40_HOME}\\usr\\bin;${PATH}"', con = "~/.Renviron")
Sys.which("make")
Sys.which("make")
library(HDdiffindiff)
library(roxygen2)
library(HDdiffindiff)
library(HDdiffindiff)
library(HDdiffindiff)
library(HDdiffindiff)
library(HDdiffindiff)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(flare)
install.package(flare)
install.packages(flare)
install.packages('flare')
library(flare)
library('flare')
install.packages("flare")
packageurl <- "http://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
packageurl <- "http://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
packageurl <- "http://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
packageurl
install.packages(packageurl, contriburl=NULL, type="source")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
install.packages('flare',repos='http://cran.us.r-project.org')
packageurl <- "https://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
packageurl <- "https://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
packageurl
packageurl <- "https://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
install.packages(packageurl, contriburl=NULL, type="source")
packageurl <- as.character("https://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz")
packageurl
install.packages(packageurl, contriburl=NULL, type="source")
install.packages("flare")
install.packages("remote")
install_version("flare","1.6.0")
libaray(remote)
library(remote)
install_version("flare","1.6.0")
library(remote)
url <- "https://cran.r-project.org/src/contrib/Archive/flare/flare_1.6.0.tar.gz"
pkgFile <- "flare_1.6.0.tar.gz"
dowload.file(url=url, destfile = pkgFile)
download.file(url=url, destfile = pkgFile)
install.packages(pkgs = pkgFile, type = "source", repos = NULL)
install.packages("igraph")
install.packages(pkgs = pkgFile, type = "source", repos = NULL)
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
roxygen2::roxygenise()
library(HDdiffindiff)
library(HDdiffindiff)
roxygen2::roxygenise()
roxygen2::roxygenise()
library(HDdiffindiff)
roxygen2::roxygenise()
library(HDdiffindiff)
Examplehighdimdiffindiff
Examplehighdimdiffindiff(p=200, q=8, n0=500, rho.X=0.5)
p=200, q=8, n0=500, rho.X=0.5
p=200
q=8
n0=500
rho.X=0.5
omega0 = rep(0,p)
for (i in 1:10){
omega0[i] = 1/i
}
omega0 = matrix(omega0, p, 1)
omega1 = rep(0,p)
for (i in 1:15){
omega1[i] = 2/i
}
omega1 = matrix(omega1, p, 1)
theta0 = rep(0,p)
for (i in 1:10){
theta0[i] = 1/i
}
beta0=omega1-omega0
z = rnorm(1000000,0, 1)
zbasis = sieve.TriPol(z, q/2)
yy = exp(z)
bb = solve(t(zbasis)%*%zbasis)%*%t(zbasis)%*%yy
beta0 = c(beta0, (bb[2:(q+1)]))
pf = c(rep(1, 1,p), rep(0, 1, q))
source("Sieve_Functional_Space_Basis.r")
############################################################################
sieve.Pol <- function(X, J_n){
return(unname(outer(X, 0:J_n, "^")));
}
############################################################################
#Trigonometric polynomials
#This function takes input vector x, and degree J_n and returns trigonometryic
#polynomials on [0,1] of degree J_n
sieve.TriPol <- function(X, J_n){
if (J_n < 1){
stop("J_n need to be at least 1");
}
basis <- rep(1,length(X));
for(k in 1:J_n){
basis <- cbind(basis, cos(2*k*pi*X), sin(2*k*pi*X));
}
return(unname(basis));
} #sieve.TriPol
#This function takes input vector x, degree J_n and order of derivative d and
#returns the derivative of the trigonometric polynomial basis
sieve.TriPol.D <- function(X, J_n, d){
if (J_n < 1){
stop("J_n need to be at least 1");
}
basis <- rep(0,length(X));
if(d==1){
for(k in 1:J_n){
basis <- cbind(basis, -2*k*pi*sin(2*k*pi*X), 2*k*pi*cos(2*k*pi*X));
} #end for loop
} #end d==1
else{
for(k in 1:J_n){
basis <- cbind(basis, -4*k^2*pi^2*cos(2*k*pi*X),
-4*k^2*pi^2*sin(2*k*pi*X));
} #end for loop
} #end d==1
return(unname(basis));
} #end sieve.TriPol.D
############################################################################
omega0 = rep(0,p)
for (i in 1:10){
omega0[i] = 1/i
}
omega0 = matrix(omega0, p, 1)
omega1 = rep(0,p)
for (i in 1:15){
omega1[i] = 2/i
}
omega1 = matrix(omega1, p, 1)
theta0 = rep(0,p)
for (i in 1:10){
theta0[i] = 1/i
}
beta0=omega1-omega0
z = rnorm(1000000,0, 1)
zbasis = sieve.TriPol(z, q/2)
yy = exp(z)
bb = solve(t(zbasis)%*%zbasis)%*%t(zbasis)%*%yy
beta0 = c(beta0, (bb[2:(q+1)]))
pf = c(rep(1, 1,p), rep(0, 1, q))
alpha = 0
sig   <-  0.5^(p-toeplitz(p:1))
x = mvrnorm(n0, mu = rep(0, p), Sigma = sig)
y0 = rnorm(n0,0,1)*(1/sqrt(2)*z +1/sqrt(2)*x[,1])
prop = 1-1/(1+exp( x %*% theta0))
treat = rbinom(n0,1,prop)
z = rnorm(n0,0, 1)
epsilon0 = rnorm(n0,0,1)
epsilon1 = rnorm(n0,0,2)
Phi0 = (x %*% omega0)
Phi1 = (x %*% omega1) +  exp(z)-bb[1]
y1 = y0 + alpha + (Phi1 + epsilon1)*treat + (Phi0 + epsilon0)*(1-treat)
library(MASS)
alpha = 0
sig   <-  0.5^(p-toeplitz(p:1))
x = mvrnorm(n0, mu = rep(0, p), Sigma = sig)
y0 = rnorm(n0,0,1)*(1/sqrt(2)*z +1/sqrt(2)*x[,1])
prop = 1-1/(1+exp( x %*% theta0))
treat = rbinom(n0,1,prop)
z = rnorm(n0,0, 1)
epsilon0 = rnorm(n0,0,1)
epsilon1 = rnorm(n0,0,2)
Phi0 = (x %*% omega0)
Phi1 = (x %*% omega1) +  exp(z)-bb[1]
y1 = y0 + alpha + (Phi1 + epsilon1)*treat + (Phi0 + epsilon0)*(1-treat)
ff = highdimdiffindiff_crossfit(y0, y1, treat, x, z,k=3, method = "Tri", q=q)
roxygen2::roxygenise()
library(HDdiffindiff)
library(HDdiffindiff)
Examplehighdimdiffindiff(p=10)
Examplehighdimdiffindiff(p=20)
p
omega0 = rep(0,p)
for (i in 1:10){
omega0[i] = 1/i
}
omega0 = matrix(omega0, p, 1)
omega1 = rep(0,p)
for (i in 1:15){
omega1[i] = 2/i
}
omega1 = matrix(omega1, p, 1)
theta0 = rep(0,p)
for (i in 1:10){
theta0[i] = 1/i
}
beta0=omega1-omega0
z = rnorm(1000000,0, 1)
zbasis = sieve.TriPol(z, q/2)
yy = exp(z)
bb = solve(t(zbasis)%*%zbasis)%*%t(zbasis)%*%yy
beta0 = c(beta0, (bb[2:(q+1)]))
pf = c(rep(1, 1,p), rep(0, 1, q))
alpha = 0
sig   <-  0.5^(p-toeplitz(p:1))
x = mvrnorm(n0, mu = rep(0, p), Sigma = sig)
y0 = rnorm(n0,0,1)*(1/sqrt(2)*z +1/sqrt(2)*x[,1])
prop = 1-1/(1+exp( x %*% theta0))
treat = rbinom(n0,1,prop)
z = rnorm(n0,0, 1)
epsilon0 = rnorm(n0,0,1)
epsilon1 = rnorm(n0,0,2)
Phi0 = (x %*% omega0)
Phi1 = (x %*% omega1) +  exp(z)-bb[1]
y1 = y0 + alpha + (Phi1 + epsilon1)*treat + (Phi0 + epsilon0)*(1-treat)
ff = highdimdiffindiff_crossfit(y0, y1, treat, x, z,k=3, method = "Tri", q=q)
dim(y0)
y0
length(y0)
dim(x)
rnorm(n0,0,1)
library(HDdiffindiff)
Examplehighdimdiffindiff(p=10)
library(HDdiffindiff)
am
library(HDdiffindiff)
aa = Examplehighdimdiffindiff
aa
aa = Examplehighdimdiffindiff(n=100)
aa = Examplehighdimdiffindiff(n=500)
aa
roxygen2::roxygenise()
library(HDdiffindiff)
aa = Examplehighdimdiffindiff(n=500)
library(HDdiffindiff)
update.packages(ask=FALSE)
